import streamlit as st
import pandas as pd
import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt
import plotly as plt
import plotly.express as px
from IPython.display import Image
from scipy.stats import skew
import plotly.figure_factory as ff

# Import Dataset
df = pd.read_csv('/home/vinicius/repos/eba_estatistica/estatistica_descritiva/dataset/mkt_data.csv')

#========================================================================
#========================== Fun√ßoes Aux ================================
#========================================================================
null_columns = [
"marital_Divorced"
,"marital_Married"
,"marital_Single"
,"marital_Together"
,"marital_Widow"
,"education_2n Cycle"
,"education_Basic"
,"education_Graduation"
,"education_Master"
,"education_PhD"
]

for item in null_columns:
    df['bool_'+ str(item)] = np.where( df[item].isnull(), 0, 1)
#========================================================================
#========================== Menu Lateral ================================
#========================================================================
st.set_page_config(page_title='EDA', page_icon='üìà', layout='wide')

st.header('Vorges Analysis: EDA')

st.sidebar.markdown('## Filtros')

#========================================================================
# Filtros
#========================================================================
kids = st.sidebar.multiselect(
    'Escolha o n√∫mero de filhos:',
    df.loc[:,'kids'].unique().tolist(),
    default=[0,1,2,3]
)
st.sidebar.markdown("""---""")

education_level = st.sidebar.multiselect(
    'Escolha o grau de instru√ß√£o:',
    df.loc[:,'education_level'].unique().tolist(),
    default=['Graduation', 'PhD', 'Master', 'Basic', '2n Cycle']
)
st.sidebar.markdown("""---""")

marital_status = st.sidebar.multiselect(
    'Escolha o Estado Civil:',
    df.loc[:,'marital_status'].unique().tolist(),
    default=['Single', 'Together', 'Married', 'Divorced', 'Widow']
)
st.sidebar.markdown("""---""")

st.markdown('### Perguntas de Neg√≥cio')
st.markdown("""---""")

#========================================================================
st.markdown('##### 1. Quantos Dados temos na base?')
qt_lines = df.shape[0]
qt_cols = df.shape[1]
st.write(f'N√∫mero de linhas: {qt_lines}')
st.write(f'N√∫mero de colunas: {qt_cols}')
st.markdown("""---""")
#========================================================================

st.markdown('##### 2. Quais s√£o as colunas num√©ricas?')
st.markdown('''

Income, Kidhome, Teenhome, Recency, MntWines,
       MntFruits, MntMeatProducts, MntFishProducts, MntSweetProducts,
       MntGoldProds, NumDealsPurchases, NumWebPurchases,
       NumCatalogPurchases, NumStorePurchases, NumWebVisitsMonth,
       AcceptedCmp3, AcceptedCmp4, AcceptedCmp5, AcceptedCmp1,
       AcceptedCmp2, Complain, Z_CostContact, Z_Revenue, Response,
       Age, Customer_Days, marital_Divorced, marital_Married,
       marital_Single, marital_Together, marital_Widow,
       education_2n Cycle, education_Basic, education_Graduation,
       education_Master, education_PhD, MntTotal, MntRegularProds,
       AcceptedCmpOverall, kids, expenses

''')
st.markdown("""---""")
#========================================================================

st.markdown('##### 3. H√° dados duplicados?')
st.write('N√£o h√° dados duplicados na base')
st.markdown("""---""")

#========================================================================

st.markdown('##### 4. H√° dados nulos nessa base? Ser√° que eles indicam algo? O que fazer com eles?')
st.write('Sim, h√° 10 colunas com dados vazio, est√£o demonstradas abaixo com a quantidade de dados nulos')
st.write('''
- marital_Divorced        1975
- marital_Married         1351
- marital_Single          1728
- marital_Together        1637
- marital_Widow           2129
- education_2n Cycle      2007
- education_Basic         2151
- education_Graduation    1092
- education_Master        1841
- education_PhD           1729

''')
st.markdown('''Os dados nulos podem carregar algum tipo de informa√ß√£o importante para o estudo, e por este motivo devemos analisa-los com calma, uma pr√°tica muito utilizada √© a remo√ß√£o desses dados por ser mais r√°pido e pr√°tico, mas nem sempre √© a melhor estrat√©gia, por exemplo, neste conjunto de dados se pergarmos a coluna 'education_master' s√≥ tem dados preenchidos com 4.0, que aparecem 364 vezes, o restante dos dados s√£o nulos, isto √© um forte indicativo que o dado nulo significa que a pessoa n√£o tem aquela atribui√ß√£o, neste caso seria a educa√ß√£o Mestrado.''')
st.markdown("""---""")

#========================================================================

st.markdown('##### 5. Qual √© a m√©dia, mediana, 25 percentil, 75 percentil, m√≠nimo e m√°ximo das colunas income, kids e expenses?')
st.dataframe(df[['kids', 'Income','expenses']].describe())
st.markdown("""---""")

#========================================================================

st.markdown('##### 6. Qual √© o maior sal√°rio encontrado na nossa base?')
st.write(df['Income'].max())
st.markdown("""---""")

#========================================================================

st.markdown('##### 7. Qual √© a distribui√ß√£o de sal√°rio na nossa base?')
# Histogram
fig = px.histogram(df['Income'])
st.plotly_chart(fig)

#Boxplot
fig = px.box(df['Income'])
st.plotly_chart(fig)
st.markdown("""---""")

#========================================================================

st.markdown('##### 8. Nossos clientes tem n√≠veis de educa√ß√£o maiores ou menores?')
linhas_selecionadas = df['education_level'].isin(education_level)
df = df.loc[linhas_selecionadas, :]
fig = px.bar(df, x = df['education_level'], color='education_level')
st.plotly_chart(fig)
st.write('Grande parte de nossos clientes tem gradua√ß√£o completa')
st.markdown("""---""")

#========================================================================

st.markdown('##### 9. Quantos clientes temos em cada estado civil?')
linhas_selecionadas = df['marital_status'].isin(marital_status)
df = df.loc[linhas_selecionadas, :]
fig = px.bar(df, x = df['marital_status'], color='marital_status')
st.plotly_chart(fig)
st.write('Maior parte dos clientes s√£o casados ou moram juntos (Together). Poucos s√£o vi√∫vos.')
st.markdown("""---""")

#========================================================================

st.markdown('##### 10. Qual √© a rela√ß√£o de estado civil com n√∫mero de filhos? Ser√° que as pessoas casadas t√™m um maior n√∫mero de filhos?')
linhas_selecionadas = df['kids'].isin(kids)
df = df.loc[linhas_selecionadas, :]
fig = px.box(df, x='marital_status', y='kids', color="marital_status")
st.plotly_chart(fig)

st.dataframe(df.groupby(['marital_status'])['kids'].describe())

st.write('M√©dia de filhos por status de uni√£o')
st.dataframe(df.groupby('marital_status')['kids'].mean())

st.write('Mediana de filhos por status de uni√£o')
st.dataframe(df.groupby('marital_status')['kids'].median())
st.markdown("""---""")

#========================================================================

st.markdown('##### 11. As pessoas gasram mais ou menos em nossa plataforma quando t√™m filhos?')
fig = px.box(df, x='kids', y='expenses', color='kids')
st.plotly_chart(fig)

st.write('M√©dia de gasto por quantidade de filhos')

st.dataframe(df[['kids','expenses']].groupby('kids').mean())

st.write('Mediana')
st.dataframe(df[['kids','expenses']].groupby('kids').median())

st.write('Podemos ver que tanto a m√©dia quanto a mediana 0 e 1 filho √© maior nessa amostra de dados, por√©m a m√©dia de 2 filhos √© menor do que de 3 filhos, enquanto a mediana de 2 filhos √© maior do que de 3 filhos. Ambos os grupos 2 e 3 tem m√©dias bem maiores do que a mediana, indicando outliers superiores (o pr√≥prio gr√°fico j√° mostra isso). Grupo 1 tamb√©m tem outliers superiores, mas essa diferen√ßa √© menos acentuada. Pessoas com nenhum filho tem uma distribui√ß√£o um pouco mais similar a uma normal (sem outliers, e mediana levemente centrada do meio do boxplot)')

st.markdown("""---""")

#========================================================================

st.markdown('##### 12. Pessoas que t√™m um maior sal√°rio gastam mais?')
st.write('Para responder esta pergunta, vamos utilizar um gr√°fico de dispers√£o mostrando os gastos versus os ganhos.')
fig = px.scatter(df, x='expenses', y='Income')
st.plotly_chart(fig)

st.write('Vamos calcular a correla√ß√£o de Pearson')
st.write(df['expenses'].corr(df['Income']))
st.markdown("""---""")

#========================================================================

st.markdown('##### 13. Pessoas com maior n√∫mero de filhos gastam menos?')
fig = px.scatter(df, x='expenses', y='Income', color='kids')
st.plotly_chart(fig)
st.write('Sim, podemos perceber que pessoas com maior n√∫mero de filhos acabam gastando menos.')
st.markdown("""---""")

#========================================================================

st.markdown('##### 14. Pessoas mais velhas gastam mais?')
fig = px.bar(df, x='Age', y='expenses', color='Age')
st.plotly_chart(fig)

st.write('Skew Expenses')
st.write(skew( df['expenses']))

#========================================================================

st.markdown('##### 15. Quais idades recebem mais?')
fig = px.bar(df, x='Age', y='Income', color='Age')
st.plotly_chart(fig)

st.write('Skew Income')
st.write(skew( df['Income']))